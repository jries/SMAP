%% Result of model-free particle fusion
%

%%
load([rootPath ID_analysis '_par.mat'])
load([rootPath ID_analysis '_avg.mat'])
load([rootPath ID_analysis '_initialTemp.mat'])
load([rootPath ID_analysis '_preReg.mat'])
load([rootPath ID_analysis '_LLMatrix.mat'])

%% Dataset
disp(['Analysis: ' par.save_name])

%%
evalc('SMAP');

L1 = g.children.guiRender.children.Layer1;
layerp=L1.getPar(L1.layerprefix);
layerp.rendermode.Value = 3;
layerp.rendermode.selection = 'constGauss';
layerp.renderparameter = 2;
g.locData.setPar('layer1_selectedField', {'locprecnm', layerp.locprecnm_min,layerp.locprecnm_max, 0, 1})
g.locData.setPar('layer1_selectedField', {'locprecznm', layerp.locprecznm_min,layerp.locprecznm_max, 0, 1})
g.locData.setPar('layer1_selectedField', {'znm', -125, 125, 1, 1})
g.locData.setPar('layer1_selectedField', {'frame', layerp.frame_min,layerp.frame_max, 0, 1})
g.locData.setPar('layer1_selectedField', {'LLrel', layerp.LLrel_min,layerp.LLrel_max, 0, 1})
evalc('L1.setGuiParameters(layerp)');
rendermode_callback = L1.guihandles.rendermode.Callback{1};
rendermode_callback([],[],L1);
L1.updateLayerField
notify(g.P,'sr_render');
close all
%%
modelPoints = [];
modelPoints{1}.x = 0;
modelPoints{1}.y = 0;
modelPoints{1}.z = 0;

mod.xnm = 0;
mod.ynm = 0;
mod.znm = 0;
mod.layer = 1;

preRegLocMoFitter = setUp_preRegFit(par);
locs = finalAvg{indBest};
[~,preRegLocs, lPars_preReg, preRegFitPar_raw] = evalc('preReg(preRegLocMoFitter, locs)');
% [preRegLocs, lPars_preReg, preRegFitPar_raw] = preReg(preRegLocMoFitter, locs);
% preRegLocs = locs;
fitting_step2 = setUp_p2pFit(mod);
fitting_step2.linkedGUI = g;
%% Final average
% Top view:
set(0,'DefaultFigureVisible','on')
fig = figure;
ax = axes(fig);

fitting_step2.rotCoordNMkImg(ax, modelPoints, preRegLocs, [0 0], 1, 'Data', 125, []);
snapnow

fitting_step2.rotCoordNMkImg(ax, modelPoints, subsetStruct(preRegLocs,preRegLocs.znm>=0), [0 0], 1, 'Data', 125, []);
snapnow

fitting_step2.rotCoordNMkImg(ax, modelPoints, subsetStruct(preRegLocs,preRegLocs.znm<0), [0 0], 1, 'Data', 125, []);
snapnow

%%
% Side view:
fitting_step2.rotCoordNMkImg(ax, modelPoints, preRegLocs, [0 90], 1, 'Data', 125, []);
snapnow

fitting_step2.rotCoordNMkImg(ax, modelPoints, subsetStruct(preRegLocs,preRegLocs.znm>=0), [0 90], 1, 'Data', 125, []);
snapnow

fitting_step2.rotCoordNMkImg(ax, modelPoints, subsetStruct(preRegLocs,preRegLocs.znm<0), [0 90], 1, 'Data', 125, []);
snapnow
set(0,'DefaultFigureVisible','off')
close all
%%
function [preRegLocs, lPars_preReg, preRegFitPar_raw] = preReg(preRegLocMoFitter, locs)
% preReg() performs pre-registration of particles based on the dual-ring
% model.
% Usage:
%   [preRegLocs, lPars_preReg, preRegFitPar_raw] = preReg(preRegLocMoFitter, locs)
%
% Args:
%   preRegLocMoFitter: an LocMoFit object of the pre-registration fitter.
%   This can be generated by setUp_preRegFit().
%   locs: a struct of localizations forming the particle to be fitted.
%
% Returns:
%   preRegLocs: a struct of transfored localizations registered to the
%   dual-ring model.
%   lPars_preReg: the lPars part of the field 'allParsArg' of the object
%   preRegLocMoFitter.
%   preRegFitPar_raw: the raw field 'allParsArg' of the object
%   preRegLocMoFitter.
% 
    preRegLocMoFitter.fit(locs)
    preRegFitPar_raw = preRegLocMoFitter.allParsArg;
    lPars_preReg = preRegLocMoFitter.exportPars(1,'lPar');
    lPars = lPars_preReg;
    lPars.variation = 0;
    preRegLocs = preRegLocMoFitter.locsHandler(locs, lPars,1);
end

function preRegLocMoFitter = setUp_preRegFit(par)
mod = functionModel(par.parFu_path2Mod);
mod.dimension = 3;
mod.layer = 1;
mod.modelObj.setInternalSettings('copyPerCorner', 1)
mod.modelObj.setInternalSettings('cornerNum', 100)

preRegLocMoFitter = LocMoFit('SolverName', 'fminsearchbnd','SolverOptions',{'Display','off'});
preRegLocMoFitter.objFunType = 'likelihood';
preRegLocMoFitter.dataDim = 3;
preRegLocMoFitter.addModel(mod);

preRegLocMoFitter.roiSize = 250;

preRegLocMoFitter.setParArg('m1.lPar.xrot','fix',false,'lb',-25,'ub',25)
preRegLocMoFitter.setParArg('m1.lPar.yrot','fix',false,'lb',-25,'ub',25)
preRegLocMoFitter.setParArg('m1.lPar.variation','fix',false,'value',30,'lb',-inf,'ub',inf,'min',0,'max',30)
preRegLocMoFitter.setParArg('m1.lPar.zrot','fix',true,'value',0)
preRegLocMoFitter.setParArg('m1.lPar.x','lb',-30,'ub',+30)
preRegLocMoFitter.setParArg('m1.lPar.y','lb',-30,'ub',+30)
preRegLocMoFitter.setParArg('m1.lPar.z','lb',-30,'ub',+30)
preRegLocMoFitter.setParArg('m1.lPar.weight','fix',true,'value',1)
preRegLocMoFitter.setParArg('m91.offset.weight','fix',false, 'value', 0.1,'lb',-inf,'ub',inf,'min',1e-3,'max',0.999)
preRegLocMoFitter.setParArg('m1.mPar.ringDistance','lb',-inf,'ub',inf, 'value', 40,'min',0,'max',80)
preRegLocMoFitter.setParArg('m1.mPar.radius', 'value', 40,'lb',-inf,'ub',inf,'min',30,'max',70)

preRegLocMoFitter.converter(preRegLocMoFitter, 'median(locs.xnm)', 'm1.lPar.x')
preRegLocMoFitter.converter(preRegLocMoFitter, 'median(locs.ynm)', 'm1.lPar.y')
preRegLocMoFitter.converter(preRegLocMoFitter, 'median(locs.znm)', 'm1.lPar.z')
end

function fitting_step2 = setUp_p2pFit(locsRef, varargin)
p = inputParser;
p.addParameter('eps',10);
p.parse(varargin{:});
p = p.Results;

mod = locsModel(locsRef, 'layer', 1);
mod.dimension = 3;
mod.layer = 1;

fitting_step2 = LocMoFit('SolverName', 'fminsearchbnd','SolverOptions',{'Display','off'});
fitting_step2.objFunType = 'likelihood';
fitting_step2.dataDim = 3;
fitting_step2.addModel(mod);
fitting_step2.setAdvanceSetting('cascade', [1 1 1; 0 0 0]);
fitting_step2.model{1}.sigmaFactor = [1 0];

fitting_step2.roiSize = 300;
fitting_step2.setParArg('m1.lPar.xrot','fix',false,'lb',-25,'ub',25)
fitting_step2.setParArg('m1.lPar.yrot','fix',false,'lb',-25,'ub',25)
fitting_step2.setParArg('m1.lPar.variation','fix',false,'value',p.eps,'lb',-inf,'ub',inf,'min',0,'max',p.eps)
fitting_step2.setParArg('m1.lPar.zrot','fix',false,'lb',-180,'ub',180)
fitting_step2.setParArg('m1.lPar.x','lb',-25,'ub',+25)
fitting_step2.setParArg('m1.lPar.y','lb',-25,'ub',+25)
fitting_step2.setParArg('m1.lPar.z','lb',-25,'ub',+25,'value',0)
fitting_step2.setParArg('m1.lPar.weight','fix',true,'value',1)
fitting_step2.setParArg('m91.offset.weight','fix',false, 'value', 0.1,'lb',-inf,'ub',inf,'min',1e-3,'max',0.999)

fitting_step2.converter(fitting_step2, 'rand(1)*360', 'm1.lPar.zrot')

fitting_step2.advanceSetting.gaussDistMode.value = 'fast';
end